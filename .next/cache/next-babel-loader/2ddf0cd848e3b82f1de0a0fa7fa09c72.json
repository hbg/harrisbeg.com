{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport '../index.scss';\nimport '../blog.scss';\nimport matter from 'gray-matter';\nimport ReactMarkdown from 'react-markdown';\nimport Header from '../../partials/head';\nimport React from \"react\";\nimport { GlobalNavbar } from \"../../partials/components\";\nexport default function BlogTemplate(_ref) {\n  var frontmatter = _ref.frontmatter,\n      markdownBody = _ref.markdownBody,\n      siteTitle = _ref.siteTitle;\n  // Render data from `getStaticProps`\n  console.log(siteTitle);\n  if (!frontmatter) return __jsx(React.Fragment, null);\n  return __jsx(\"div\", null, __jsx(Header, {\n    page_name: siteTitle\n  }), __jsx(GlobalNavbar, null), __jsx(\"article\", null, __jsx(\"h1\", null, frontmatter.title), __jsx(\"div\", null, __jsx(ReactMarkdown, {\n    source: markdownBody\n  }))));\n}\nexport function getStaticProps(_ref2) {\n  var ctx, slug, content, data;\n  return _regeneratorRuntime.async(function getStaticProps$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          ctx = _extends({}, _ref2);\n          slug = ctx.params.slug;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(import(\"../../posts/\".concat(slug, \".md\")));\n\n        case 4:\n          content = _context.sent;\n          data = matter(content[\"default\"]);\n          return _context.abrupt(\"return\", {\n            props: {\n              title: 'Harris Beg | Test',\n              frontmatter: data.data,\n              markdownBody: data.content\n            }\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\nexport function getStaticPaths() {\n  var blogs, blogSlugs, paths;\n  return _regeneratorRuntime.async(function getStaticPaths$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          //get all .md files in the posts dir\n          blogs = glob.sync('posts/**/*.md'); //remove path and extension to leave filename only\n\n          blogSlugs = blogs.map(function (file) {\n            return file.split('/')[1].replace(/ /g, '-').slice(0, -3).trim();\n          }); // create paths with `slug` param\n\n          paths = blogSlugs.map(function (slug) {\n            return \"/blog/\".concat(slug);\n          });\n          return _context2.abrupt(\"return\", {\n            paths: paths,\n            fallback: false\n          });\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}