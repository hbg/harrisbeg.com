{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport matter from 'gray-matter';\nimport ReactMarkdown from 'react-markdown';\nexport default function BlogPost(_ref) {\n  var siteTitle = _ref.siteTitle,\n      frontmatter = _ref.frontmatter,\n      markdownBody = _ref.markdownBody;\n  if (!frontmatter) return __jsx(React.Fragment, null);\n  return __jsx(\"div\", null, __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", null, \"Back to post list\")), __jsx(\"article\", null, __jsx(\"h1\", null, frontmatter.title), __jsx(\"p\", null, \"By \", frontmatter.author), __jsx(\"div\", null, __jsx(ReactMarkdown, {\n    source: markdownBody\n  }))));\n}\nexport function getStaticProps(_ref2) {\n  var ctx, postname, content, data;\n  return _regeneratorRuntime.async(function getStaticProps$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          ctx = _extends({}, _ref2);\n          postname = ctx.params.postname;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(import(\"../../posts/\".concat(postname, \".md\")));\n\n        case 4:\n          content = _context.sent;\n          data = matter(content[\"default\"]);\n          return _context.abrupt(\"return\", {\n            props: {\n              siteTitle: 'Test',\n              frontmatter: data.data,\n              markdownBody: data.content\n            }\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\nexport function getStaticPaths() {\n  var blogSlugs, paths;\n  return _regeneratorRuntime.async(function getStaticPaths$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          blogSlugs = function (context) {\n            var keys = context.keys();\n            var data = keys.map(function (key, index) {\n              var slug = key.replace(/^.*[\\\\\\/]/, '').slice(0, -3);\n              return slug;\n            });\n            return data;\n          }(require.context('../../posts', true, /\\.md$/));\n\n          paths = blogSlugs.map(function (slug) {\n            return \"/post/\".concat(slug);\n          });\n          return _context2.abrupt(\"return\", {\n            paths: paths,\n            fallback: false\n          });\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/harrisbeg/Desktop/Development/hbgw/pages/blog/[slug].js"],"names":["Link","matter","ReactMarkdown","BlogPost","siteTitle","frontmatter","markdownBody","title","author","getStaticProps","ctx","postname","params","content","data","props","getStaticPaths","blogSlugs","context","keys","map","key","index","slug","replace","slice","require","paths","fallback"],"mappings":";;;;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AAEA,eAAe,SAASC,QAAT,OAA4D;AAAA,MAAxCC,SAAwC,QAAxCA,SAAwC;AAAA,MAA7BC,WAA6B,QAA7BA,WAA6B;AAAA,MAAhBC,YAAgB,QAAhBA,YAAgB;AACzE,MAAI,CAACD,WAAL,EAAkB,OAAO,2BAAP;AAElB,SACI,mBACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KACE,qCADF,CADF,EAIE,uBACE,kBAAKA,WAAW,CAACE,KAAjB,CADF,EAEE,wBAAOF,WAAW,CAACG,MAAnB,CAFF,EAGE,mBACE,MAAC,aAAD;AAAe,IAAA,MAAM,EAAEF;AAAvB,IADF,CAHF,CAJF,CADJ;AAcD;AAED,OAAO,SAAeG,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmCC,UAAAA,GAAnC;AACGC,UAAAA,QADH,GACgBD,GAAG,CAACE,MADpB,CACGD,QADH;AAAA;AAAA,2CAGiB,6BAAsBA,QAAtB,SAHjB;;AAAA;AAGCE,UAAAA,OAHD;AAICC,UAAAA,IAJD,GAIQb,MAAM,CAACY,OAAO,WAAR,CAJd;AAAA,2CAME;AACLE,YAAAA,KAAK,EAAE;AACLX,cAAAA,SAAS,EAAE,MADN;AAELC,cAAAA,WAAW,EAAES,IAAI,CAACA,IAFb;AAGLR,cAAAA,YAAY,EAAEQ,IAAI,CAACD;AAHd;AADF,WANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeP,OAAO,SAAeG,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,SADD,GACc,UAACC,OAAD,EAAa;AAC9B,gBAAMC,IAAI,GAAGD,OAAO,CAACC,IAAR,EAAb;AACA,gBAAML,IAAI,GAAGK,IAAI,CAACC,GAAL,CAAS,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACpC,kBAAIC,IAAI,GAAGF,GAAG,CAACG,OAAJ,CAAY,WAAZ,EAAyB,EAAzB,EAA6BC,KAA7B,CAAmC,CAAnC,EAAsC,CAAC,CAAvC,CAAX;AAEA,qBAAOF,IAAP;AACD,aAJY,CAAb;AAKA,mBAAOT,IAAP;AACD,WARiB,CAQfY,OAAO,CAACR,OAAR,CAAgB,aAAhB,EAA+B,IAA/B,EAAqC,OAArC,CARe,CADb;;AAWCS,UAAAA,KAXD,GAWSV,SAAS,CAACG,GAAV,CAAc,UAACG,IAAD;AAAA,mCAAmBA,IAAnB;AAAA,WAAd,CAXT;AAAA,4CAaE;AACLI,YAAAA,KAAK,EAALA,KADK;AAELC,YAAAA,QAAQ,EAAE;AAFL,WAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\nimport Link from 'next/link'\nimport matter from 'gray-matter'\nimport ReactMarkdown from 'react-markdown'\n\nexport default function BlogPost({ siteTitle, frontmatter, markdownBody }) {\n  if (!frontmatter) return <></>\n\n  return (\n      <div>\n        <Link href=\"/\">\n          <a>Back to post list</a>\n        </Link>\n        <article>\n          <h1>{frontmatter.title}</h1>\n          <p>By {frontmatter.author}</p>\n          <div>\n            <ReactMarkdown source={markdownBody} />\n          </div>\n        </article>\n      </div>\n  )\n}\n\nexport async function getStaticProps({ ...ctx }) {\n  const { postname } = ctx.params\n\n  const content = await import(`../../posts/${postname}.md`)\n  const data = matter(content.default)\n\n  return {\n    props: {\n      siteTitle: 'Test',\n      frontmatter: data.data,\n      markdownBody: data.content,\n    },\n  }\n}\n\nexport async function getStaticPaths() {\n  const blogSlugs = ((context) => {\n    const keys = context.keys()\n    const data = keys.map((key, index) => {\n      let slug = key.replace(/^.*[\\\\\\/]/, '').slice(0, -3)\n\n      return slug\n    })\n    return data\n  })(require.context('../../posts', true, /\\.md$/))\n\n  const paths = blogSlugs.map((slug) => `/post/${slug}`)\n\n  return {\n    paths,\n    fallback: false,\n  }\n}"]},"metadata":{},"sourceType":"module"}