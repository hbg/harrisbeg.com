{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport matter from 'gray-matter';\nimport ReactMarkdown from 'react-markdown';\nimport Header from '../../partials/head';\nimport React from \"react\";\nexport default function BlogTemplate(props) {\n  // Render data from `getStaticProps`\n  return __jsx(\"div\", null, __jsx(Header, {\n    page_name: props.siteTitle\n  }), __jsx(\"article\", null, __jsx(\"h1\", null, props.frontmatter.title), __jsx(\"div\", null, __jsx(ReactMarkdown, {\n    source: props.markdownBody\n  }))));\n}\nexport function getStaticProps(_ref) {\n  var ctx, slug, content, config, data;\n  return _regeneratorRuntime.async(function getStaticProps$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          ctx = _extends({}, _ref);\n          slug = ctx.params.slug;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(import(\"../../posts/\".concat(slug, \".md\")));\n\n        case 4:\n          content = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(import(\"../../data/config.json\"));\n\n        case 7:\n          config = _context.sent;\n          data = matter(content[\"default\"]);\n          return _context.abrupt(\"return\", {\n            props: {\n              siteTitle: config.title,\n              frontmatter: data.data,\n              markdownBody: data.content\n            }\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\nexport function getStaticPaths() {\n  var blogs, blogSlugs, paths;\n  return _regeneratorRuntime.async(function getStaticPaths$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          //get all .md files in the posts dir\n          blogs = glob.sync('posts/**/*.md'); //remove path and extension to leave filename only\n\n          blogSlugs = blogs.map(function (file) {\n            return file.split('/')[1].replace(/ /g, '-').slice(0, -3).trim();\n          }); // create paths with `slug` param\n\n          paths = blogSlugs.map(function (slug) {\n            return \"/blog/\".concat(slug);\n          });\n          return _context2.abrupt(\"return\", {\n            paths: paths,\n            fallback: false\n          });\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/harrisbeg/Desktop/Development/hbgw/pages/blog/[slug].js"],"names":["matter","ReactMarkdown","Header","React","BlogTemplate","props","siteTitle","frontmatter","title","markdownBody","getStaticProps","ctx","slug","params","content","config","data","getStaticPaths","blogs","glob","sync","blogSlugs","map","file","split","replace","slice","trim","paths","fallback"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC1C;AACA,SAEE,mBACI,MAAC,MAAD;AAAQ,IAAA,SAAS,EAAEA,KAAK,CAACC;AAAzB,IADJ,EAEE,uBACE,kBAAKD,KAAK,CAACE,WAAN,CAAkBC,KAAvB,CADF,EAEE,mBACE,MAAC,aAAD;AAAe,IAAA,MAAM,EAAEH,KAAK,CAACI;AAA7B,IADF,CAFF,CAFF,CAFF;AAYD;AAED,OAAO,SAAeC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmCC,UAAAA,GAAnC;AACGC,UAAAA,IADH,GACYD,GAAG,CAACE,MADhB,CACGD,IADH;AAAA;AAAA,2CAEiB,6BAAsBA,IAAtB,SAFjB;;AAAA;AAECE,UAAAA,OAFD;AAAA;AAAA,2CAGgB,gCAHhB;;AAAA;AAGCC,UAAAA,MAHD;AAICC,UAAAA,IAJD,GAIQhB,MAAM,CAACc,OAAO,WAAR,CAJd;AAAA,2CAME;AACLT,YAAAA,KAAK,EAAE;AACLC,cAAAA,SAAS,EAAES,MAAM,CAACP,KADb;AAELD,cAAAA,WAAW,EAAES,IAAI,CAACA,IAFb;AAGLP,cAAAA,YAAY,EAAEO,IAAI,CAACF;AAHd;AADF,WANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeP,OAAO,SAAeG,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACL;AACMC,UAAAA,KAFD,GAESC,IAAI,CAACC,IAAL,CAAU,eAAV,CAFT,EAIL;;AACMC,UAAAA,SALD,GAKaH,KAAK,CAACI,GAAN,CAAU,UAAAC,IAAI;AAAA,mBAC9BA,IAAI,CACDC,KADH,CACS,GADT,EACc,CADd,EAEGC,OAFH,CAEW,IAFX,EAEiB,GAFjB,EAGGC,KAHH,CAGS,CAHT,EAGY,CAAC,CAHb,EAIGC,IAJH,EAD8B;AAAA,WAAd,CALb,EAaL;;AACMC,UAAAA,KAdD,GAcSP,SAAS,CAACC,GAAV,CAAc,UAAAV,IAAI;AAAA,mCAAaA,IAAb;AAAA,WAAlB,CAdT;AAAA,4CAgBE;AACLgB,YAAAA,KAAK,EAALA,KADK;AAELC,YAAAA,QAAQ,EAAE;AAFL,WAhBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import matter from 'gray-matter'\nimport ReactMarkdown from 'react-markdown'\nimport Header from '../../partials/head';\nimport React from \"react\";\n\nexport default function BlogTemplate(props) {\n  // Render data from `getStaticProps`\n  return (\n\n    <div>\n        <Header page_name={props.siteTitle}/>\n      <article>\n        <h1>{props.frontmatter.title}</h1>\n        <div>\n          <ReactMarkdown source={props.markdownBody} />\n        </div>\n      </article>\n    </div>\n  )\n}\n\nexport async function getStaticProps({ ...ctx }) {\n  const { slug } = ctx.params;\n  const content = await import(`../../posts/${slug}.md`);\n  const config = await import(`../../data/config.json`);\n  const data = matter(content.default);\n\n  return {\n    props: {\n      siteTitle: config.title,\n      frontmatter: data.data,\n      markdownBody: data.content,\n    },\n  }\n}\n\nexport async function getStaticPaths() {\n  //get all .md files in the posts dir\n  const blogs = glob.sync('posts/**/*.md')\n\n  //remove path and extension to leave filename only\n  const blogSlugs = blogs.map(file =>\n    file\n      .split('/')[1]\n      .replace(/ /g, '-')\n      .slice(0, -3)\n      .trim()\n  )\n\n  // create paths with `slug` param\n  const paths = blogSlugs.map(slug => `/blog/${slug}`)\n\n  return {\n    paths,\n    fallback: false,\n  }\n}"]},"metadata":{},"sourceType":"module"}