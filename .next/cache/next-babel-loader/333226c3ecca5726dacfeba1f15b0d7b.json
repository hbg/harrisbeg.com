{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport '../index.scss';\nimport './blog.scss';\nimport Header from '../../partials/head';\nimport { GlobalNavbar } from '../../partials/components';\nimport React from \"react\";\nimport fs from \"fs\";\nimport matter from \"gray-matter\";\nexport default function Blog(_ref) {\n  var posts = _ref.posts;\n  return __jsx(\"div\", null, __jsx(Header, {\n    page_name: \"Blog\"\n  }), posts.map(function (_ref2) {\n    var _ref2$frontmatter = _ref2.frontmatter,\n        title = _ref2$frontmatter.title,\n        description = _ref2$frontmatter.description,\n        date = _ref2$frontmatter.date;\n    return __jsx(\"article\", {\n      key: title\n    }, __jsx(\"header\", null, __jsx(\"h3\", null, title), __jsx(\"span\", null, date)), __jsx(\"section\", null, __jsx(\"p\", null, description)));\n  }), __jsx(GlobalNavbar, null), __jsx(\"script\", null));\n}\nexport function getStaticProps() {\n  var files, posts;\n  return _regeneratorRuntime.async(function getStaticProps$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          files = fs.readdirSync(\"\".concat(process.cwd(), \"/posts\"));\n          console.log(\"Files: \" + files);\n          posts = files.map(function (filename) {\n            var markdownWithMetadata = fs.readFileSync(\"/posts/\".concat(filename)).toString();\n\n            var _matter = matter(markdownWithMetadata),\n                data = _matter.data; // Convert post date to format: Month day, Year\n\n\n            var options = {\n              year: \"numeric\",\n              month: \"long\",\n              day: \"numeric\"\n            };\n            var formattedDate = data.date.toLocaleDateString(\"en-US\", options);\n\n            var frontmatter = _objectSpread({}, data, {\n              date: formattedDate\n            });\n\n            return {\n              slug: filename.replace(\".md\", \"\"),\n              frontmatter: frontmatter\n            };\n          });\n          return _context.abrupt(\"return\", {\n            props: {\n              posts: posts\n            }\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/harrisbeg/Desktop/Development/hbgw/pages/blog/index.js"],"names":["Header","GlobalNavbar","React","fs","matter","Blog","posts","map","frontmatter","title","description","date","getStaticProps","files","readdirSync","process","cwd","console","log","filename","markdownWithMetadata","readFileSync","toString","data","options","year","month","day","formattedDate","toLocaleDateString","slug","replace","props"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,eAAP;AACA,OAAO,aAAP;AACA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,SAAQC,YAAR,QAA2B,2BAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,eAAe,SAASC,IAAT,OAAuB;AAAA,MAARC,KAAQ,QAARA,KAAQ;AAClC,SACA,mBACI,MAAC,MAAD;AAAQ,IAAA,SAAS,EAAC;AAAlB,IADJ,EAEKA,KAAK,CAACC,GAAN,CAAU;AAAA,kCAAGC,WAAH;AAAA,QAAkBC,KAAlB,qBAAkBA,KAAlB;AAAA,QAAyBC,WAAzB,qBAAyBA,WAAzB;AAAA,QAAsCC,IAAtC,qBAAsCA,IAAtC;AAAA,WACX;AAAS,MAAA,GAAG,EAAEF;AAAd,OACE,sBACE,kBAAKA,KAAL,CADF,EAEE,oBAAOE,IAAP,CAFF,CADF,EAKE,uBACE,iBAAID,WAAJ,CADF,CALF,CADW;AAAA,GAAV,CAFL,EAaI,MAAC,YAAD,OAbJ,EAcI,qBAdJ,CADA;AAkBH;AACD,OAAO,SAAeE,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,UAAAA,KADH,GACWV,EAAE,CAACW,WAAH,WAAkBC,OAAO,CAACC,GAAR,EAAlB,YADX;AAEHC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAYL,KAAxB;AACIP,UAAAA,KAHD,GAGSO,KAAK,CAACN,GAAN,CAAU,UAACY,QAAD,EAAc;AACpC,gBAAMC,oBAAoB,GAAGjB,EAAE,CAC5BkB,YAD0B,kBACHF,QADG,GAE1BG,QAF0B,EAA7B;;AADoC,0BAKnBlB,MAAM,CAACgB,oBAAD,CALa;AAAA,gBAK5BG,IAL4B,WAK5BA,IAL4B,EAOpC;;;AACA,gBAAMC,OAAO,GAAG;AAAEC,cAAAA,IAAI,EAAE,SAAR;AAAmBC,cAAAA,KAAK,EAAE,MAA1B;AAAkCC,cAAAA,GAAG,EAAE;AAAvC,aAAhB;AACA,gBAAMC,aAAa,GAAGL,IAAI,CAACZ,IAAL,CAAUkB,kBAAV,CAA6B,OAA7B,EAAsCL,OAAtC,CAAtB;;AAEA,gBAAMhB,WAAW,qBACZe,IADY;AAEfZ,cAAAA,IAAI,EAAEiB;AAFS,cAAjB;;AAKA,mBAAO;AACLE,cAAAA,IAAI,EAAEX,QAAQ,CAACY,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CADD;AAELvB,cAAAA,WAAW,EAAXA;AAFK,aAAP;AAID,WApBa,CAHT;AAAA,2CAyBE;AACLwB,YAAAA,KAAK,EAAE;AACL1B,cAAAA,KAAK,EAALA;AADK;AADF,WAzBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import '../index.scss'\nimport './blog.scss'\nimport Header from '../../partials/head';\nimport {GlobalNavbar} from '../../partials/components';\nimport React from \"react\";\nimport fs from \"fs\";\nimport matter from \"gray-matter\";\n\nexport default function Blog({posts}) {\n    return (\n    <div>\n        <Header page_name=\"Blog\"/>\n        {posts.map(({ frontmatter: { title, description, date } }) => (\n        <article key={title}>\n          <header>\n            <h3>{title}</h3>\n            <span>{date}</span>\n          </header>\n          <section>\n            <p>{description}</p>\n          </section>\n        </article>\n      ))}\n        <GlobalNavbar/>\n        <script></script>\n    </div>\n    );\n}\nexport async function getStaticProps() {\n    const files = fs.readdirSync(`${process.cwd()}/posts`);\n    console.log(\"Files: \" + files);\n  const posts = files.map((filename) => {\n    const markdownWithMetadata = fs\n      .readFileSync(`/posts/${filename}`)\n      .toString();\n\n    const { data } = matter(markdownWithMetadata);\n\n    // Convert post date to format: Month day, Year\n    const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n    const formattedDate = data.date.toLocaleDateString(\"en-US\", options);\n\n    const frontmatter = {\n      ...data,\n      date: formattedDate,\n    };\n\n    return {\n      slug: filename.replace(\".md\", \"\"),\n      frontmatter,\n    };\n  });\n\n  return {\n    props: {\n      posts,\n    },\n  };\n}\n\n"]},"metadata":{},"sourceType":"module"}